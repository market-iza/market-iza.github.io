// ======== index.js ========

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let goodsData = [];
let currentSort = localStorage.getItem("sortOption") || "default";
let searchQuery = "";

const container = document.getElementById("goods-container");
const sortSelect = document.getElementById("sort-select");
const searchInput = document.getElementById("search-input");

// ===== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ =====
if (container) {
  fetch("goods.json")
    .then(res => res.json())
    .then(data => {
      goodsData = data.filter(item => item.visible);
      renderFilteredAndSortedGoods();
      window.goodsData = goodsData;
    })
    .catch(err => console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è goods.json:", err));
}

// ===== –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–µ–Ω–¥–µ—Ä—É =====
function renderFilteredAndSortedGoods() {
  const filtered = goodsData.filter(item =>
    item.name.toLowerCase().includes(searchQuery) ||
    item.content.toLowerCase().includes(searchQuery)
  );

  const sorted = getSortedGoods(filtered, currentSort);
  renderGoods(sorted);
}

// ===== –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ =====
function renderGoods(data) {
  if (!container) return;
  container.innerHTML = "";

  if (data.length === 0) {
    container.innerHTML = `<p class="no-results">–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ...</p>`;
    return;
  }

  data.forEach(item => {
    const card = document.createElement("div");
    card.className = "goods-card";
    card.innerHTML = `
      <img src="${item.images}" alt="${item.name}">
      <h3>${item.name}</h3>
      <p class="goods_content">${item.content}</p>
      <div class="good_price" data-id="${item.goods_id}">
        <p class="price">${item.price} –≥—Ä–Ω</p>
        <button class="btn-buy" 
                data-id="${item.goods_id}" 
                data-name="${escapeQuotes(item.name)}" 
                data-price="${item.price}">
        </button>
      </div>
    `;

    // üì¶ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª–∫–∏ –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ –∫–∞—Ä—Ç–∫—É
    card.addEventListener("click", () => openProductModal(item.goods_id));

    // üõí –∫–Ω–æ–ø–∫–∞ ‚Äú–∫—É–ø–∏—Ç–∏‚Äù (–∑—É–ø–∏–Ω—è—î –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª–∫–∏)
    const buyBtn = card.querySelector(".btn-buy");
    buyBtn.addEventListener("click", e => {
      e.stopPropagation();
      addToCart(item.goods_id, item.name, item.price);
    });

    container.appendChild(card);
  });
}

// ===== –§—É–Ω–∫—Ü—ñ—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è =====
function getSortedGoods(data, criteria) {
  const sorted = [...data];
  switch (criteria) {
    case "new":
      sorted.sort((a, b) => new Date(b.date) - new Date(a.date));
      break;
    case "priceAsc":
      sorted.sort((a, b) => a.price - b.price);
      break;
    case "priceDesc":
      sorted.sort((a, b) => b.price - a.price);
      break;
    case "name":
      sorted.sort((a, b) => a.name.localeCompare(b.name, "uk"));
      break;
    default:
      break;
  }
  return sorted;
}

// ===== –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó =====
let currentPage = 1;
const itemsPerPage = 8; // –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
const paginationContainer = document.createElement("div");
paginationContainer.className = "pagination";
container?.after(paginationContainer); // –≤—Å—Ç–∞–≤–ª—è—î–º–æ –ø—ñ–¥ —Å—ñ—Ç–∫—É —Ç–æ–≤–∞—Ä—ñ–≤

// ===== –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–µ–Ω–¥–µ—Ä—É (–æ–Ω–æ–≤–ª–µ–Ω–∞) =====
function renderFilteredAndSortedGoods() {
  const filtered = goodsData.filter(item =>
    item.name.toLowerCase().includes(searchQuery) ||
    item.content.toLowerCase().includes(searchQuery)
  );

  const sorted = getSortedGoods(filtered, currentSort);

  // üîπ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
  const totalPages = Math.ceil(sorted.length / itemsPerPage);

  // üîπ –ö–æ—Ä–∏–≥—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É (—â–æ–± –Ω–µ –≤–∏—Ö–æ–¥–∏–ª–∞ –∑–∞ –º–µ–∂—ñ)
  if (currentPage > totalPages) currentPage = totalPages || 1;

  // üîπ –í–∏–±–∏—Ä–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  const start = (currentPage - 1) * itemsPerPage;
  const paginated = sorted.slice(start, start + itemsPerPage);

  renderGoods(paginated);
  renderPagination(totalPages);
}

// ===== –§—É–Ω–∫—Ü—ñ—è —Ä–µ–Ω–¥–µ—Ä—É –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó =====
function renderPagination(totalPages) {
  paginationContainer.innerHTML = "";

  if (totalPages <= 1) return; // —è–∫—â–æ —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ ‚Äî –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ

  // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
  const prevBtn = document.createElement("button");
  prevBtn.textContent = "‚ü®";
  prevBtn.disabled = currentPage === 1;
  prevBtn.addEventListener("click", () => {
    if (currentPage > 1) {
      currentPage--;
      renderFilteredAndSortedGoods();
      scrollToTop();
    }
  });
  paginationContainer.appendChild(prevBtn);

  // –ù–æ–º–µ—Ä–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
  for (let i = 1; i <= totalPages; i++) {
    const btn = document.createElement("button");
    btn.textContent = i;
    btn.className = i === currentPage ? "active" : "";
    btn.addEventListener("click", () => {
      currentPage = i;
      renderFilteredAndSortedGoods();
      scrollToTop();
    });
    paginationContainer.appendChild(btn);
  }

  // –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
  const nextBtn = document.createElement("button");
  nextBtn.textContent = "‚ü©";
  nextBtn.disabled = currentPage === totalPages;
  nextBtn.addEventListener("click", () => {
    if (currentPage < totalPages) {
      currentPage++;
      renderFilteredAndSortedGoods();
      scrollToTop();
    }
  });
  paginationContainer.appendChild(nextBtn);
}

// ===== –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ–≥–æ—Ä–∏ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è =====
function scrollToTop() {
  window.scrollTo({ top: 0, behavior: "smooth" });
}


// ===== –ü–æ–¥—ñ—è –∑–º—ñ–Ω–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è =====
if (sortSelect) {
  sortSelect.value = currentSort;
  sortSelect.addEventListener("change", () => {
    currentSort = sortSelect.value;
    localStorage.setItem("sortOption", currentSort);
    renderFilteredAndSortedGoods();
  });
}

// ===== –ü–æ—à—É–∫ —É —Ä–µ–∂–∏–º—ñ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É =====
if (searchInput) {
  searchInput.addEventListener("input", () => {
    searchQuery = searchInput.value.trim().toLowerCase();
    renderFilteredAndSortedGoods();
  });
}

// ===== –†–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–∏ –∑–º—ñ–Ω—ñ –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö =====
Object.defineProperty(window, "goodsData", {
  get() {
    return goodsData;
  },
  set(newValue) {
    goodsData = Array.isArray(newValue) ? newValue : [];
    renderFilteredAndSortedGoods();
  }
});